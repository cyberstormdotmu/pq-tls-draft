



Network Working Group                                          F. Kiefer
Internet-Draft                                                   Mozilla
Intended status: Experimental                             K. Kwiatkowski
Expires: February 21, 2019                                    Cloudflare
                                                         August 20, 2018


                 Hybrid ECDHE-SIDH Key Exchange for TLS
                   draft-kiefer-tls-ecdhe-sidh-latest

Abstract

   This draft specifies a TLS key exchange that combines the post-
   quantum key exchange, Supersingular elliptic curve isogenie diffie-
   hellman (SIDH), with elliptic curve Diffie-Hellman (ECDHE) key
   exchange.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on February 21, 2019.

Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.



Kiefer & Kwiatkowski    Expires February 21, 2019               [Page 1]

Internet-Draft           ECDHE-SIDH Key Exchange             August 2018


1.  Introduction

   Supersingular elliptic curve isogenie diffie-hellman (SIDH) has been
   proposed [SIDH] as a diffie-hellman like key-exchange protocol secure
   against quantum computers.  Because there's not enough confidence in
   the security of SIDH yet it should only be used in combination with a
   classical key-exchange scheme.

   This document defines a way to combine [eSIDH] with the ECDHE key
   exchanges defined in [RFC7748] for the TLS 1.3 [RFC8446] key-
   exchange.

   "x25519" is combined with "sidh503" and "x448" is combined with
   "sidh751".

1.1.  Performance Considerations

   Both handshake partners have to compute the SIDH values in addition
   to the ECDHE values, which requires additional time for computation.
   The handshake messages also get larger because the SIDH values are
   added (see Section 4 for details).

1.2.  Notation

   x25519 and x448 denote the ECDHE algorithms defined over the
   respective curve from [RFC7748].  sidh503 and sidh751 denote the SIDH
   algorithms defined using a prime of bit-length "503" and "751"
   respectively.

1.3.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

2.  Hybrid SIDH-ECDHE Key Exchange

   A hybrid key exchange takes the output of two separate key exchanges
   and mixes the results in a secure way.

   The ECDHE and SIDH shared secrets are calculated independently.  The
   shared secret for ECDHE-SIDH is then the concatenation of the ECDHE
   and the SIDH shared secrets.  For x25519sidh503 for example this is

   secret = x25519_secret || sidh_secret




Kiefer & Kwiatkowski    Expires February 21, 2019               [Page 2]

Internet-Draft           ECDHE-SIDH Key Exchange             August 2018


   The HKDF-Extract step used by TLS is relied on to combine entropy
   from both secrets.

2.1.  ECDHE shared secret calculation

   The ECDHE shared secret calculation is performed as described in
   Section 7.4.2 of [RFC8446].

2.2.  SIDH Key Exchange

   This document uses primes p503 and p751 defined in [eSIDH] and [SIKE]
   for sidh503 and sidh751.  See [SIKE] for details on how to compute
   key-exchange messages and the shared secret.  Optimised versions of
   the algorithms mentioned here might be used.

2.2.1.  Field Element Representation

   Each element ("c=a+b*i") of the underlying quadratic field GF(p^2) is
   encoded as an array of bytes in little-endian order, i.e., the least
   significant octet appears first, where each element "a,b" from GF(p)
   is encoded using "itoos" from [SIKE] Section 1.2.6.  In particular,
   an element of GF(p) is converted to

   e_(n-1) * 256^(n-1) + ... + e_1 * 256 + e_0

   with "n" 63 for p503 and 94 for p751.  The octet representation of
   each element is then the concatenation of "e_i" in little endian,
   i.e. "e_0||...||e_(n-1)", and the octet representation of element "c"
   is the concatenation of "a" and "b", "a||b".

   See "fp2toos" [SIKE] Section 1.2.6 to 1.2.8 for details.

2.2.2.  Key-exchange message generation

   After choosing a private key each party computes its public key (P,
   Q, R) using "isogen_l" from [SIKE] Section 1.3.5 and converts each
   element into octets (cf.  Section 2.2.1).

   See "pktoos" from [SIKE] Section 1.2.9 for details on converting the
   public key to octets.

2.2.3.  Shared secret calculation

   The SIDH shared secret is calculated as described in Section 1.3.6 of
   [SIKE] using "isoex_l".

   Calculating SIDH shared secret requires each side to use isogenies of
   different degree.  This document assumes parameterizations as



Kiefer & Kwiatkowski    Expires February 21, 2019               [Page 3]

Internet-Draft           ECDHE-SIDH Key Exchange             August 2018


   described in [SIKE], which is based on 4- and 3-power degree
   isogenies.  In order to calculate the shared secret, the client
   always generates an ephemeral key pair based on 4-power degree
   isogenies.  Accordingly, the server always generates an ephemeral key
   pair based on 3-power degree isogenies.

   The shared secret is a j-invariant and therefore an element of
   GF(p^2).  It is converted to octets as described in Section 2.2.1.

   See "fp2toos" [SIKE] Section 1.2.6 to 1.2.8 for details.  All values
   are encoded without length prefixes or separators.

3.  Negotiated Groups

   This document extends the enum of NamedGroups to use in the
   "supported_groups" extension from TLS 1.3 [RFC8446] Section 4.2.7.
   The new codepoint for the "Supported Groups Registry" is:

   enum {
       ...,
       x25519sidh503(0x0105), x448sidh751(0x0106),
   } NamedGroup;

4.  ECDHE-SIDH key exchange parameters

   This document defines ECDHE-SIDH parameters to use in the "key_share"
   extension from TLS 1.3 (see Section 4.2.8 of [RFC8446]).

   ECDHE parameters for both clients and servers are encoded in the
   "key_exchange" field of a KeyShareEntry as described in Section 4.2.8
   of [RFC8446] and [RFC7748].  SIDH parameters are appended to this
   value.

   In particular, the contents are the serialised value of the following
   struct:

      struct {
          opaque X[coordinate_length];
          opaque P[sidh_coordinate_length];
          opaque Q[sidh_coordinate_length];
          opaque R[sidh_coordinate_length];
      } UncompressedPointRepresentation;

   X is the public point from x25519 or x448 as described in [RFC7748].

   P, Q, and R are the binary representations of three field elements
   over GF(p503^2) and GF(p751^2) respectively from the public SIDH key




Kiefer & Kwiatkowski    Expires February 21, 2019               [Page 4]

Internet-Draft           ECDHE-SIDH Key Exchange             August 2018


   values as described in Section 2.2.2.  All values in the struct are
   encoded without length prefixes or separators.

   Implementers MUST perform the checks to verify the SIDH public key as
   specified in Section 9 of [eSIDH].

5.  Security Considerations

   Security of SIDH is based on the isogeny walk problem, assuming
   elliptic curves between isogenies are supersingular (see [SIKE]
   chapter 4.1).  Algorithms solving this problem as well as usage of
   isogenies as drop-in replacement for Diffie-Hellman are relatively
   young area of research.  Therefore the security behind the ECDHE-SIDH
   handshake does not rely on the security of SIDH exclusively.

   Idea behind ECDHE-SIDH hybrid scheme is to combine an existing key-
   agreement algorithm with what's believed to be a quantum-resistant
   one.  When large quantum computers are available they will be able to
   break both x25519 and x448.  In this case the ECDHE-SIDH scheme is
   still safe assuming SIDH is secure.  On the other hand, if SIDH is
   found to be flawed, the hybrid scheme is still secure against
   classical attacks assuming security of x25519/x448.  Security
   estimates for classical and quantum computers are provided in table
   below based on [SIKE] and [RFC7748].  [RNSL] Chapter 1 provides
   introduction to quantum resource estimates.

        +---------------+-----------+----------+------------------+
        | Scheme        | Classical | Quantum  | NIST PQ category |
        +---------------+-----------+----------+------------------+
        | x25519sidh503 | 128-bit   | 64-qubit | 1                |
        |               |           |          |                  |
        | x448sidh751   | 224-bit   | 96-qubit | 3                |
        +---------------+-----------+----------+------------------+

   As described in [ISOSEC] it is possible to perform active attacks on
   static-static or non-interactive variants of the SIDH scheme.  The
   countermeasure for this attack was described in [KLM15].  Research
   proposes so-called "indirect key validation", using Fujisaki-Okamoto
   type transform.  However, using this transform is impractical and
   thus SIDH can be considered secure only if used for ephemeral keys.
   A more detailed discussion can be found in [URBJAO].

   Security against side-channel attacks is described in [SIKE].

   The security of the described key exchange relies on the security, in
   particular the collision resistance, of the used key-derivation
   function.  TLS 1.3 uses HKDF [RFC5869] as its key-derivation




Kiefer & Kwiatkowski    Expires February 21, 2019               [Page 5]

Internet-Draft           ECDHE-SIDH Key Exchange             August 2018


   function.  It is therefore important that the hash function used in
   HKDF is collision-resistant.

6.  IANA Considerations

   TODO: register the codepoints

7.  References

7.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC5869]  Krawczyk, H. and P. Eronen, "HMAC-based Extract-and-Expand
              Key Derivation Function (HKDF)", RFC 5869,
              DOI 10.17487/RFC5869, May 2010,
              <https://www.rfc-editor.org/info/rfc5869>.

   [RFC7748]  Langley, A., Hamburg, M., and S. Turner, "Elliptic Curves
              for Security", RFC 7748, DOI 10.17487/RFC7748, January
              2016, <https://www.rfc-editor.org/info/rfc7748>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/info/rfc8446>.

   [SIDH]     Jao, D. and L. De Feo, "Towards quantum-resistant
              cryptosystems from supersingular elliptic curve isogenie",
              PQCrypto-2011 , 2011,
              <https://eprint.iacr.org/2011/506.pdf>.

   [SIKE]     Azarderakhsh, R., Campagna, M., Costello, C., De Feo, L.,
              Hess, B., Jalali, A., Jao, D., Koziel, B., LaMacchia, B.,
              Longa, P., Naehrig, M., Renes, J., Soukharev, V., and D.
              Urbanik, "Supersingular Isogeny Key Encapsulation",
              Submission to the NIST Post-Quantum Standardization
              project , 2017, <http://sike.org/files/SIDH-spec.pdf>.







Kiefer & Kwiatkowski    Expires February 21, 2019               [Page 6]

Internet-Draft           ECDHE-SIDH Key Exchange             August 2018


7.2.  Informative References

   [eSIDH]    Costello, C., Longa, P., and M. Naehrig, "Efficient
              algorithms for supersingular isogeny Diffie-Hellman",
              IACR-CRYPTO-2016 , 2016,
              <https://eprint.iacr.org/2016/413.pdf>.

   [ISOSEC]   Galbraith, S., Petit, C., Shani, B., and Y. Bo Ti, "On the
              security of supersingular isogeny cryptosystems", IACR-
              CRYPTO-2016 , 2016,
              <https://eprint.iacr.org/2016/859.pdf>.

   [KLM15]    Kirkwood, D., Lackey, B., McVey, J., Motley, M., Solinas,
              J., and D. Tuller, "Failure is not an Option:
              Standardization Issues for Post-Quantum Key Agreement",
              Workshop on Cybersecurity in a Post Quantum World, 2015 ,
              2015.

   [RNSL]     Roetteler, M., Naehrig, M., Svore, K., and K. Lauter,
              "Quantum Resource Estimates for Computing Elliptic Curve
              Discrete Logarithms", arXiv , 2017,
              <https://arxiv.org/pdf/1706.06752.pdf>.

   [URBJAO]   Urbanik, D. and D. Jao, "SoK: The Problem Landscape of
              SIDH", IACR-CRYPTO-2018 , 2018,
              <https://eprint.iacr.org/2018/336.pdf>.

Acknowledgements

   o  Martin Thomson
      Mozilla
      mt@mozilla.com

Authors' Addresses

   Franziskus Kiefer
   Mozilla

   Email: franziskuskiefer@gmail.com


   Krzysztof Kwiatkowski
   Cloudflare

   Email: kris@cloudflare.com






Kiefer & Kwiatkowski    Expires February 21, 2019               [Page 7]
